<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Tests\Integration\Conversations\V1;

use Twilio\Exceptions\DeserializeException;
use Twilio\Exceptions\TwilioException;
use Twilio\Http\Response;
use Twilio\Tests\HolodeckTestCase;
use Twilio\Tests\Request;

class AddressConfigurationTest extends HolodeckTestCase {
    public function testReadRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->conversations->v1->addressConfigurations->read();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://conversations.twilio.com/v1/Configuration/Addresses'
        ));
    }

    public function testReadAllResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "meta": {
                    "page": 0,
                    "page_size": 50,
                    "first_page_url": "https://conversations.twilio.com/v1/Configuration/Addresses?PageSize=50&Page=0",
                    "previous_page_url": null,
                    "url": "https://conversations.twilio.com/v1/Configuration/Addresses?PageSize=50&Page=0",
                    "next_page_url": null,
                    "key": "address_configurations"
                },
                "address_configurations": [
                    {
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "sid": "IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "address": "+37256123457",
                        "type": "sms",
                        "friendly_name": "My Test Configuration",
                        "auto_creation": {
                            "enabled": true,
                            "type": "webhook",
                            "conversation_service_sid": "ISaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                            "webhook_url": "https://example.com",
                            "webhook_method": "POST",
                            "webhook_filters": [
                                "onParticipantAdded",
                                "onMessageAdded"
                            ]
                        },
                        "date_created": "2016-03-24T21:05:50Z",
                        "date_updated": "2016-03-24T21:05:50Z",
                        "url": "https://conversations.twilio.com/v1/Configuration/Addresses/IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                    },
                    {
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "sid": "IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab",
                        "address": "+37256123458",
                        "type": "sms",
                        "friendly_name": "Studio Test Configuration",
                        "auto_creation": {
                            "enabled": false,
                            "type": "studio",
                            "conversation_service_sid": "ISaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                            "studio_flow_sid": "FWaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                            "studio_retry_count": 3
                        },
                        "date_created": "2016-03-24T21:05:50Z",
                        "date_updated": "2016-03-24T21:05:50Z",
                        "url": "https://conversations.twilio.com/v1/Configuration/Addresses/IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab"
                    },
                    {
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "sid": "IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac",
                        "address": "+37256123459",
                        "type": "sms",
                        "friendly_name": "Default Test Configuration",
                        "auto_creation": {
                            "enabled": true,
                            "type": "default"
                        },
                        "date_created": "2016-03-24T21:05:50Z",
                        "date_updated": "2016-03-24T21:05:50Z",
                        "url": "https://conversations.twilio.com/v1/Configuration/Addresses/IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac"
                    }
                ]
            }
            '
        ));

        $actual = $this->twilio->conversations->v1->addressConfigurations->read();

        $this->assertNotNull($actual);
    }

    public function testReadBlankResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "meta": {
                    "page": 0,
                    "page_size": 50,
                    "first_page_url": "https://conversations.twilio.com/v1/Configuration/Addresses?PageSize=50&Page=0",
                    "url": "https://conversations.twilio.com/v1/Configuration/Addresses?PageSize=50&Page=0",
                    "previous_page_url": null,
                    "next_page_url": null,
                    "key": "address_configurations"
                },
                "address_configurations": []
            }
            '
        ));

        $actual = $this->twilio->conversations->v1->addressConfigurations->read();

        $this->assertNotNull($actual);
    }

    public function testReadByAddressTypeResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "meta": {
                    "page": 0,
                    "page_size": 50,
                    "first_page_url": "https://conversations.twilio.com/v1/Configuration/Addresses?Type=sms&PageSize=50&Page=0",
                    "previous_page_url": null,
                    "url": "https://conversations.twilio.com/v1/Configuration/Addresses?Type=sms&PageSize=50&Page=0",
                    "next_page_url": null,
                    "key": "address_configurations"
                },
                "address_configurations": [
                    {
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "sid": "IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "address": "+37256123457",
                        "type": "sms",
                        "friendly_name": "My Test Configuration",
                        "auto_creation": {
                            "enabled": true,
                            "type": "webhook",
                            "conversation_service_sid": "ISaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                            "webhook_url": "https://example.com",
                            "webhook_method": "POST",
                            "webhook_filters": [
                                "onParticipantAdded",
                                "onMessageAdded"
                            ]
                        },
                        "date_created": "2016-03-24T21:05:50Z",
                        "date_updated": "2016-03-24T21:05:50Z",
                        "url": "https://conversations.twilio.com/v1/Configuration/Addresses/IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                    },
                    {
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "sid": "IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab",
                        "address": "+37256123458",
                        "type": "sms",
                        "friendly_name": "Studio Test Configuration",
                        "auto_creation": {
                            "enabled": false,
                            "type": "studio",
                            "conversation_service_sid": "ISaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                            "studio_flow_sid": "FWaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                            "studio_retry_count": 3
                        },
                        "date_created": "2016-03-24T21:05:50Z",
                        "date_updated": "2016-03-24T21:05:50Z",
                        "url": "https://conversations.twilio.com/v1/Configuration/Addresses/IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab"
                    },
                    {
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "sid": "IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac",
                        "address": "+37256123459",
                        "type": "sms",
                        "friendly_name": "Default Test Configuration",
                        "auto_creation": {
                            "enabled": true,
                            "type": "default"
                        },
                        "date_created": "2016-03-24T21:05:50Z",
                        "date_updated": "2016-03-24T21:05:50Z",
                        "url": "https://conversations.twilio.com/v1/Configuration/Addresses/IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac"
                    }
                ]
            }
            '
        ));

        $actual = $this->twilio->conversations->v1->addressConfigurations->read();

        $this->assertNotNull($actual);
    }

    public function testFetchRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->conversations->v1->addressConfigurations("IGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->fetch();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://conversations.twilio.com/v1/Configuration/Addresses/IGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
        ));
    }

    public function testFetchResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "sid": "IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "address": "+37256123457",
                "type": "sms",
                "friendly_name": "My Test Configuration",
                "auto_creation": {
                    "enabled": true,
                    "type": "webhook",
                    "conversation_service_sid": "ISaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                    "webhook_url": "https://example.com",
                    "webhook_method": "POST",
                    "webhook_filters": [
                        "onParticipantAdded",
                        "onMessageAdded"
                    ]
                },
                "date_created": "2016-03-24T21:05:50Z",
                "date_updated": "2016-03-24T21:05:50Z",
                "url": "https://conversations.twilio.com/v1/Configuration/Addresses/IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
            }
            '
        ));

        $actual = $this->twilio->conversations->v1->addressConfigurations("IGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->fetch();

        $this->assertNotNull($actual);
    }

    public function testCreateRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->conversations->v1->addressConfigurations->create("sms", "address");
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $values = ['Type' => "sms", 'Address' => "address", ];

        $this->assertRequest(new Request(
            'post',
            'https://conversations.twilio.com/v1/Configuration/Addresses',
            null,
            $values
        ));
    }

    public function testCreateResponse(): void {
        $this->holodeck->mock(new Response(
            201,
            '
            {
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "sid": "IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "address": "+37256123457",
                "type": "sms",
                "friendly_name": "My Test Configuration",
                "auto_creation": {
                    "enabled": true,
                    "type": "webhook",
                    "conversation_service_sid": "ISaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                    "webhook_url": "https://example.com",
                    "webhook_method": "POST",
                    "webhook_filters": [
                        "onParticipantAdded",
                        "onMessageAdded"
                    ]
                },
                "date_created": "2016-03-24T21:05:50Z",
                "date_updated": "2016-03-24T21:05:50Z",
                "url": "https://conversations.twilio.com/v1/Configuration/Addresses/IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
            }
            '
        ));

        $actual = $this->twilio->conversations->v1->addressConfigurations->create("sms", "address");

        $this->assertNotNull($actual);
    }

    public function testUpdateRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->conversations->v1->addressConfigurations("IGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->update();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'post',
            'https://conversations.twilio.com/v1/Configuration/Addresses/IGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
        ));
    }

    public function testUpdateResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "sid": "IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "address": "+37256123457",
                "type": "sms",
                "friendly_name": "My Test Configuration Updated",
                "auto_creation": {
                    "enabled": false,
                    "type": "studio",
                    "conversation_service_sid": "ISaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                    "studio_flow_sid": "FWaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                    "studio_retry_count": 3
                },
                "date_created": "2016-03-24T21:05:50Z",
                "date_updated": "2016-03-24T21:05:51Z",
                "url": "https://conversations.twilio.com/v1/Configuration/Addresses/IGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
            }
            '
        ));

        $actual = $this->twilio->conversations->v1->addressConfigurations("IGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->update();

        $this->assertNotNull($actual);
    }

    public function testDeleteRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->conversations->v1->addressConfigurations("IGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->delete();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'delete',
            'https://conversations.twilio.com/v1/Configuration/Addresses/IGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
        ));
    }

    public function testDeleteResponse(): void {
        $this->holodeck->mock(new Response(
            204,
            null
        ));

        $actual = $this->twilio->conversations->v1->addressConfigurations("IGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->delete();

        $this->assertTrue($actual);
    }
}