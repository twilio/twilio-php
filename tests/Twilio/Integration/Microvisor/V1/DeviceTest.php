<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Tests\Integration\Microvisor\V1;

use Twilio\Exceptions\DeserializeException;
use Twilio\Exceptions\TwilioException;
use Twilio\Http\Response;
use Twilio\Tests\HolodeckTestCase;
use Twilio\Tests\Request;

class DeviceTest extends HolodeckTestCase {
    public function testReadRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->microvisor->v1->devices->read();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://microvisor.twilio.com/v1/Devices'
        ));
    }

    public function testReadEmptyResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "devices": [],
                "meta": {
                    "page": 0,
                    "page_size": 50,
                    "first_page_url": "https://microvisor.twilio.com/v1/Devices?PageSize=50&Page=0",
                    "previous_page_url": null,
                    "url": "https://microvisor.twilio.com/v1/Devices?PageSize=50&Page=0",
                    "next_page_url": null,
                    "key": "devices"
                }
            }
            '
        ));

        $actual = $this->twilio->microvisor->v1->devices->read();

        $this->assertNotNull($actual);
    }

    public function testReadFullResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "devices": [
                    {
                        "sid": "UVaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "unique_name": "This is my device; there are many like it.",
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "app": {
                            "target_sid": "KAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                            "target_hash": null,
                            "date_targeted": "2021-01-01T12:34:56Z",
                            "update_status": "up-to-date",
                            "update_error_code": 0,
                            "reported_sid": "KAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                            "date_reported": "2021-01-01T12:34:56Z"
                        },
                        "logging": {
                            "enabled": true,
                            "date_expires": "2021-01-01T12:34:56Z"
                        },
                        "date_created": "2021-01-01T12:34:56Z",
                        "date_updated": "2021-01-01T12:34:56Z",
                        "url": "https://microvisor.twilio.com/v1/Devices/UVaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                    }
                ],
                "meta": {
                    "page": 0,
                    "page_size": 50,
                    "first_page_url": "https://microvisor.twilio.com/v1/Devices?PageSize=50&Page=0",
                    "previous_page_url": null,
                    "url": "https://microvisor.twilio.com/v1/Devices?PageSize=50&Page=0",
                    "next_page_url": null,
                    "key": "devices"
                }
            }
            '
        ));

        $actual = $this->twilio->microvisor->v1->devices->read();

        $this->assertGreaterThan(0, \count($actual));
    }

    public function testFetchRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->microvisor->v1->devices("UVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->fetch();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://microvisor.twilio.com/v1/Devices/UVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
        ));
    }

    public function testFetchResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "sid": "UVaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "unique_name": "This is my device; there are many like it.",
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "app": {
                    "target_sid": "KAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                    "target_hash": null,
                    "date_targeted": "2021-01-01T12:34:56Z",
                    "update_status": "up-to-date",
                    "update_error_code": 0,
                    "reported_sid": "KAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                    "date_reported": "2021-01-01T12:34:56Z"
                },
                "logging": {
                    "enabled": true,
                    "date_expires": "2021-01-01T12:34:56Z"
                },
                "date_created": "2021-01-01T12:34:56Z",
                "date_updated": "2021-01-01T12:34:56Z",
                "url": "https://microvisor.twilio.com/v1/Devices/UVaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
            }
            '
        ));

        $actual = $this->twilio->microvisor->v1->devices("UVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->fetch();

        $this->assertNotNull($actual);
    }

    public function testUpdateRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->microvisor->v1->devices("UVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->update();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'post',
            'https://microvisor.twilio.com/v1/Devices/UVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
        ));
    }

    public function testUpdateResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "sid": "UVaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "unique_name": "UniqueName",
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "app": {
                    "target_sid": "KAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                    "target_hash": null,
                    "date_targeted": "2021-01-01T12:34:56Z",
                    "update_status": "pending",
                    "update_error_code": 0,
                    "reported_sid": null,
                    "date_reported": "2021-01-01T12:34:56Z"
                },
                "logging": {
                    "enabled": false,
                    "date_expires": null
                },
                "date_created": "2015-07-30T20:00:00Z",
                "date_updated": "2015-07-30T20:00:00Z",
                "url": "https://microvisor.twilio.com/v1/Devices/UVaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
            }
            '
        ));

        $actual = $this->twilio->microvisor->v1->devices("UVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->update();

        $this->assertNotNull($actual);
    }
}