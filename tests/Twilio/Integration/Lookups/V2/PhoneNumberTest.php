<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Tests\Integration\Lookups\V2;

use Twilio\Exceptions\DeserializeException;
use Twilio\Exceptions\TwilioException;
use Twilio\Http\Response;
use Twilio\Tests\HolodeckTestCase;
use Twilio\Tests\Request;

class PhoneNumberTest extends HolodeckTestCase {
    public function testFetchRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->lookups->v2->phoneNumbers("phone_number")->fetch();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://lookups.twilio.com/v2/PhoneNumbers/phone_number'
        ));
    }

    public function testFetchResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "calling_country_code": "1",
                "country_code": "US",
                "phone_number": "+14159929960",
                "national_format": "(415) 992-9960",
                "valid": true,
                "validation_errors": null,
                "caller_name": null,
                "sim_swap": null,
                "call_forwarding": null,
                "live_activity": null,
                "line_type_intelligence": null,
                "url": "https://lookups.twilio.com/v2/PhoneNumbers/+14159929960"
            }
            '
        ));

        $actual = $this->twilio->lookups->v2->phoneNumbers("phone_number")->fetch();

        $this->assertNotNull($actual);
    }

    public function testFetchInvalidResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "calling_country_code": null,
                "country_code": null,
                "phone_number": "+141599299600",
                "national_format": null,
                "valid": false,
                "validation_errors": [
                    "TOO_LONG"
                ],
                "caller_name": null,
                "sim_swap": null,
                "call_forwarding": null,
                "live_activity": null,
                "line_type_intelligence": null,
                "url": "https://lookups.twilio.com/v2/PhoneNumbers/+141599299600"
            }
            '
        ));

        $actual = $this->twilio->lookups->v2->phoneNumbers("phone_number")->fetch();

        $this->assertNotNull($actual);
    }

    public function testFetchCallerNameResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "calling_country_code": "1",
                "country_code": "US",
                "phone_number": "+14159929960",
                "national_format": "(415) 992-9960",
                "valid": true,
                "validation_errors": null,
                "caller_name": {
                    "caller_name": "Sergio Suarez",
                    "caller_type": "CONSUMER",
                    "error_code": null
                },
                "sim_swap": null,
                "call_forwarding": null,
                "live_activity": null,
                "line_type_intelligence": null,
                "url": "https://lookups.twilio.com/v2/PhoneNumbers/+14159929960"
            }
            '
        ));

        $actual = $this->twilio->lookups->v2->phoneNumbers("phone_number")->fetch();

        $this->assertNotNull($actual);
    }

    public function testFetchSimSwapResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "calling_country_code": "44",
                "country_code": "GB",
                "phone_number": "+447772000001",
                "national_format": "07772 000001",
                "valid": true,
                "validation_errors": null,
                "caller_name": null,
                "sim_swap": {
                    "last_sim_swap": {
                        "last_sim_swap_date": "2020-04-27T10:18:50Z",
                        "swapped_period": "PT15282H33M44S",
                        "swapped_in_period": true
                    },
                    "carrier_name": "Vodafone UK",
                    "mobile_country_code": "276",
                    "mobile_network_code": "02",
                    "error_code": null
                },
                "call_forwarding": null,
                "live_activity": null,
                "line_type_intelligence": null,
                "url": "https://lookups.twilio.com/v2/PhoneNumbers/+447772000001"
            }
            '
        ));

        $actual = $this->twilio->lookups->v2->phoneNumbers("phone_number")->fetch();

        $this->assertNotNull($actual);
    }

    public function testFetchSimSwapWithoutLastSimSwapDateResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "calling_country_code": "44",
                "country_code": "GB",
                "phone_number": "+447772000001",
                "national_format": "07772 000001",
                "valid": true,
                "validation_errors": null,
                "caller_name": null,
                "sim_swap": {
                    "last_sim_swap": {
                        "last_sim_swap_date": null,
                        "swapped_period": "PT24H",
                        "swapped_in_period": true
                    },
                    "carrier_name": "Vodafone UK",
                    "mobile_country_code": "276",
                    "mobile_network_code": "02",
                    "error_code": null
                },
                "call_forwarding": null,
                "live_activity": null,
                "line_type_intelligence": null,
                "url": "https://lookups.twilio.com/v2/PhoneNumbers/+447772000001"
            }
            '
        ));

        $actual = $this->twilio->lookups->v2->phoneNumbers("phone_number")->fetch();

        $this->assertNotNull($actual);
    }

    public function testFetchSimSwapWithFalseSwappedResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "calling_country_code": "44",
                "country_code": "GB",
                "phone_number": "+447772000001",
                "national_format": "07772 000001",
                "valid": true,
                "validation_errors": null,
                "caller_name": null,
                "sim_swap": {
                    "last_sim_swap": {
                        "last_sim_swap_date": null,
                        "swapped_period": "PT24H",
                        "swapped_in_period": false
                    },
                    "carrier_name": "Vodafone UK",
                    "mobile_country_code": "276",
                    "mobile_network_code": "02",
                    "error_code": null
                },
                "call_forwarding": null,
                "live_activity": null,
                "line_type_intelligence": null,
                "url": "https://lookups.twilio.com/v2/PhoneNumbers/+447772000001"
            }
            '
        ));

        $actual = $this->twilio->lookups->v2->phoneNumbers("phone_number")->fetch();

        $this->assertNotNull($actual);
    }

    public function testFetchCallForwardingResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "calling_country_code": "44",
                "country_code": "GB",
                "phone_number": "+447772000001",
                "national_format": "07772 000001",
                "valid": true,
                "validation_errors": null,
                "caller_name": null,
                "sim_swap": null,
                "call_forwarding": {
                    "call_forwarding_status": "true",
                    "carrier_name": "Vodafone UK",
                    "mobile_country_code": "276",
                    "mobile_network_code": "02",
                    "error_code": null
                },
                "live_activity": null,
                "line_type_intelligence": null,
                "url": "https://lookups.twilio.com/v2/PhoneNumbers/+447772000001"
            }
            '
        ));

        $actual = $this->twilio->lookups->v2->phoneNumbers("phone_number")->fetch();

        $this->assertNotNull($actual);
    }

    public function testFetchSimSwapAndCallForwardingResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "calling_country_code": "44",
                "country_code": "GB",
                "phone_number": "+447772000001",
                "national_format": "07772 000001",
                "valid": true,
                "validation_errors": null,
                "caller_name": null,
                "sim_swap": {
                    "last_sim_swap": {
                        "last_sim_swap_date": "2020-11-05T20:52:09.322Z",
                        "swapped_period": "PT24H",
                        "swapped_in_period": true
                    },
                    "carrier_name": "Vodafone UK",
                    "mobile_country_code": "276",
                    "mobile_network_code": "02",
                    "error_code": null
                },
                "call_forwarding": {
                    "call_forwarding_status": "true",
                    "carrier_name": "Vodafone UK",
                    "mobile_country_code": "276",
                    "mobile_network_code": "02",
                    "error_code": null
                },
                "live_activity": null,
                "line_type_intelligence": null,
                "url": "https://lookups.twilio.com/v2/PhoneNumbers/+447772000001"
            }
            '
        ));

        $actual = $this->twilio->lookups->v2->phoneNumbers("phone_number")->fetch();

        $this->assertNotNull($actual);
    }

    public function testFetchLiveActivityConnectivityResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "calling_country_code": "44",
                "country_code": "GB",
                "phone_number": "+447772000001",
                "national_format": "07772 000001",
                "valid": true,
                "validation_errors": null,
                "caller_name": null,
                "sim_swap": null,
                "call_forwarding": null,
                "live_activity": {
                    "connectivity": "connected",
                    "original_carrier": {
                        "name": "Vodafone",
                        "mobile_country_code": "234",
                        "mobile_network_code": "15"
                    },
                    "ported": "false",
                    "ported_carrier": null,
                    "roaming": "false",
                    "roaming_carrier": null,
                    "error_code": null
                },
                "line_type_intelligence": null,
                "url": "https://lookups.twilio.com/v2/PhoneNumbers/+447772000001"
            }
            '
        ));

        $actual = $this->twilio->lookups->v2->phoneNumbers("phone_number")->fetch();

        $this->assertNotNull($actual);
    }

    public function testFetchLiveActivityPortingResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "calling_country_code": "44",
                "country_code": "GB",
                "phone_number": "+447772000001",
                "national_format": "07772 000001",
                "valid": true,
                "validation_errors": null,
                "caller_name": null,
                "sim_swap": null,
                "call_forwarding": null,
                "live_activity": {
                    "connectivity": "connected",
                    "original_carrier": {
                        "name": "Vodafone",
                        "mobile_country_code": "234",
                        "mobile_network_code": "15"
                    },
                    "ported": "true",
                    "ported_carrier": {
                        "name": "Orange",
                        "mobile_country_code": "266",
                        "mobile_network_code": "10"
                    },
                    "roaming": "false",
                    "roaming_carrier": null,
                    "error_code": null
                },
                "line_type_intelligence": null,
                "url": "https://lookups.twilio.com/v2/PhoneNumbers/+447772000001"
            }
            '
        ));

        $actual = $this->twilio->lookups->v2->phoneNumbers("phone_number")->fetch();

        $this->assertNotNull($actual);
    }

    public function testFetchLiveActivityRoamingResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "calling_country_code": "44",
                "country_code": "GB",
                "phone_number": "+447772000001",
                "national_format": "07772 000001",
                "valid": true,
                "validation_errors": null,
                "caller_name": null,
                "sim_swap": null,
                "call_forwarding": null,
                "live_activity": {
                    "connectivity": "connected",
                    "original_carrier": {
                        "name": "Vodafone",
                        "mobile_country_code": "234",
                        "mobile_network_code": "15"
                    },
                    "ported": "false",
                    "ported_carrier": null,
                    "roaming": "true",
                    "roaming_carrier": {
                        "name": "Orange",
                        "mobile_country_code": "266",
                        "mobile_network_code": "10",
                        "country_code": "RO"
                    },
                    "error_code": null
                },
                "line_type_intelligence": null,
                "url": "https://lookups.twilio.com/v2/PhoneNumbers/+447772000001"
            }
            '
        ));

        $actual = $this->twilio->lookups->v2->phoneNumbers("phone_number")->fetch();

        $this->assertNotNull($actual);
    }

    public function testFetchLineTypeIntelligenceResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "calling_country_code": "1",
                "country_code": "US",
                "phone_number": "+14159929960",
                "national_format": "(415) 992-9960",
                "valid": true,
                "validation_errors": null,
                "caller_name": null,
                "sim_swap": null,
                "call_forwarding": null,
                "live_activity": null,
                "line_type_intelligence": {
                    "error_code": null,
                    "mobile_country_code": "240",
                    "mobile_network_code": "38",
                    "carrier_name": "Twilio - SMS/MMS-SVR",
                    "type": "nonFixedVoip"
                },
                "url": "https://lookups.twilio.com/v2/PhoneNumbers/+14159929960"
            }
            '
        ));

        $actual = $this->twilio->lookups->v2->phoneNumbers("phone_number")->fetch();

        $this->assertNotNull($actual);
    }
}