<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Tests\Integration\Media\V1;

use Twilio\Exceptions\DeserializeException;
use Twilio\Exceptions\TwilioException;
use Twilio\Http\Response;
use Twilio\Tests\HolodeckTestCase;
use Twilio\Tests\Request;

class MediaProcessorTest extends HolodeckTestCase {
    public function testCreateRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->media->v1->mediaProcessor->create("extension", "extension_context");
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $values = ['Extension' => "extension", 'ExtensionContext' => "extension_context", ];

        $this->assertRequest(new Request(
            'post',
            'https://media.twilio.com/v1/MediaProcessors',
            null,
            $values
        ));
    }

    public function testCreateResponse(): void {
        $this->holodeck->mock(new Response(
            201,
            '
            {
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "date_created": "2015-07-30T20:00:00Z",
                "date_updated": "2015-07-30T20:00:00Z",
                "extension": "video-composer-v1",
                "extension_context": "{}",
                "sid": "ZXdeadbeefdeadbeefdeadbeefdeadbeef",
                "status": "started",
                "status_callback": "http://www.example.com",
                "status_callback_method": "POST",
                "ended_reason": null,
                "url": "https://media.twilio.com/v1/MediaProcessors/ZXdeadbeefdeadbeefdeadbeefdeadbeef",
                "max_duration": 300
            }
            '
        ));

        $actual = $this->twilio->media->v1->mediaProcessor->create("extension", "extension_context");

        $this->assertNotNull($actual);
    }

    public function testFetchRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->media->v1->mediaProcessor("ZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->fetch();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://media.twilio.com/v1/MediaProcessors/ZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
        ));
    }

    public function testFetchResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "date_created": "2015-07-30T20:00:00Z",
                "date_updated": "2015-07-30T20:00:00Z",
                "extension": "video-composer-v1",
                "extension_context": "{}",
                "sid": "ZXdeadbeefdeadbeefdeadbeefdeadbeef",
                "status": "started",
                "status_callback": "http://www.example.com",
                "status_callback_method": "POST",
                "ended_reason": null,
                "url": "https://media.twilio.com/v1/MediaProcessors/ZXdeadbeefdeadbeefdeadbeefdeadbeef",
                "max_duration": 300
            }
            '
        ));

        $actual = $this->twilio->media->v1->mediaProcessor("ZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->fetch();

        $this->assertNotNull($actual);
    }

    public function testUpdateRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->media->v1->mediaProcessor("ZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->update("ended");
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $values = ['Status' => "ended", ];

        $this->assertRequest(new Request(
            'post',
            'https://media.twilio.com/v1/MediaProcessors/ZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
            null,
            $values
        ));
    }

    public function testUpdateEndedResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "date_created": "2015-07-30T20:00:00Z",
                "date_updated": "2015-07-30T20:01:00Z",
                "extension": "video-composer-v1",
                "extension_context": "{}",
                "sid": "ZXdeadbeefdeadbeefdeadbeefdeadbeef",
                "status": "ended",
                "status_callback": "http://www.example.com",
                "status_callback_method": "POST",
                "ended_reason": "ended-via-api",
                "url": "https://media.twilio.com/v1/MediaProcessors/ZXdeadbeefdeadbeefdeadbeefdeadbeef",
                "max_duration": 300
            }
            '
        ));

        $actual = $this->twilio->media->v1->mediaProcessor("ZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->update("ended");

        $this->assertNotNull($actual);
    }

    public function testReadRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->media->v1->mediaProcessor->read();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://media.twilio.com/v1/MediaProcessors'
        ));
    }

    public function testReadEmptyResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "meta": {
                    "page": 0,
                    "page_size": 10,
                    "first_page_url": "https://media.twilio.com/v1/MediaProcessors?Status=started&Order=asc&PageSize=10&Page=0",
                    "previous_page_url": null,
                    "url": "https://media.twilio.com/v1/MediaProcessors?Status=started&Order=asc&PageSize=10&Page=0",
                    "next_page_url": null,
                    "key": "media_processors"
                },
                "media_processors": []
            }
            '
        ));

        $actual = $this->twilio->media->v1->mediaProcessor->read();

        $this->assertNotNull($actual);
    }

    public function testReadItemsResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "meta": {
                    "page": 0,
                    "page_size": 10,
                    "first_page_url": "https://media.twilio.com/v1/MediaProcessors?Status=ended&Order=desc&PageSize=10&Page=0",
                    "previous_page_url": null,
                    "url": "https://media.twilio.com/v1/MediaProcessors?Status=ended&Order=desc&PageSize=10&Page=0",
                    "next_page_url": null,
                    "key": "media_processors"
                },
                "media_processors": [
                    {
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "date_created": "2015-07-30T20:00:00Z",
                        "date_updated": "2015-07-30T20:01:00Z",
                        "extension": "video-composer-v1",
                        "extension_context": "{}",
                        "sid": "ZXdeadbeefdeadbeefdeadbeefdeadbeef",
                        "status": "ended",
                        "status_callback": "http://www.example.com",
                        "status_callback_method": "POST",
                        "ended_reason": "ended-via-api",
                        "url": "https://media.twilio.com/v1/MediaProcessors/ZXdeadbeefdeadbeefdeadbeefdeadbeef",
                        "max_duration": 300
                    }
                ]
            }
            '
        ));

        $actual = $this->twilio->media->v1->mediaProcessor->read();

        $this->assertNotNull($actual);
    }

    public function testReadItemsUsingPageTokenResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "meta": {
                    "page": 0,
                    "page_size": 10,
                    "first_page_url": "https://media.twilio.com/v1/MediaProcessors?Status=ended&Order=desc&PageSize=10&Page=0",
                    "previous_page_url": null,
                    "url": "https://media.twilio.com/v1/MediaProcessors?Status=ended&Order=desc&PageSize=10&Page=0&PageToken=PTTUszYTgyOGFhNDIzZWExNzA0OTkwODNlMDlkZTg3M2NiNDoxOjI%253D",
                    "next_page_url": null,
                    "key": "media_processors"
                },
                "media_processors": [
                    {
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "date_created": "2015-07-30T20:00:00Z",
                        "date_updated": "2015-07-30T20:01:00Z",
                        "extension": "video-composer-v1",
                        "extension_context": "{}",
                        "sid": "ZXdeadbeefdeadbeefdeadbeefdeadbeef",
                        "status": "ended",
                        "status_callback": "http://www.example.com",
                        "status_callback_method": "POST",
                        "ended_reason": "ended-via-api",
                        "url": "https://media.twilio.com/v1/MediaProcessors/ZXdeadbeefdeadbeefdeadbeefdeadbeef",
                        "max_duration": 300
                    }
                ]
            }
            '
        ));

        $actual = $this->twilio->media->v1->mediaProcessor->read();

        $this->assertNotNull($actual);
    }

    public function testReadItemsPageLargerThanMaxResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "meta": {
                    "page": 0,
                    "page_size": 100,
                    "first_page_url": "https://media.twilio.com/v1/MediaProcessors?Status=ended&Order=desc&PageSize=100&Page=0",
                    "previous_page_url": null,
                    "url": "https://media.twilio.com/v1/MediaProcessors?Status=ended&Order=desc&PageSize=100&Page=0",
                    "next_page_url": null,
                    "key": "media_processors"
                },
                "media_processors": [
                    {
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "date_created": "2015-07-30T20:00:00Z",
                        "date_updated": "2015-07-30T20:01:00Z",
                        "extension": "video-composer-v1",
                        "extension_context": "{}",
                        "sid": "ZXdeadbeefdeadbeefdeadbeefdeadbeef",
                        "status": "ended",
                        "status_callback": "http://www.example.com",
                        "status_callback_method": "POST",
                        "ended_reason": "ended-via-api",
                        "url": "https://media.twilio.com/v1/MediaProcessors/ZXdeadbeefdeadbeefdeadbeefdeadbeef",
                        "max_duration": 300
                    }
                ]
            }
            '
        ));

        $actual = $this->twilio->media->v1->mediaProcessor->read();

        $this->assertNotNull($actual);
    }
}