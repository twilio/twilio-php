<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Tests\Integration\Media\V1;

use Twilio\Exceptions\DeserializeException;
use Twilio\Exceptions\TwilioException;
use Twilio\Http\Response;
use Twilio\Tests\HolodeckTestCase;
use Twilio\Tests\Request;

class PlayerStreamerTest extends HolodeckTestCase {
    public function testFetchRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->media->v1->playerStreamer("VJXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->fetch();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://media.twilio.com/v1/PlayerStreamers/VJXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
        ));
    }

    public function testFetchResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "date_created": "2015-07-30T20:00:00Z",
                "date_updated": "2015-07-30T20:00:00Z",
                "status": "created",
                "video": true,
                "sid": "VJcafebabecafebabecafebabecafebabe",
                "status_callback": "http://www.example.com",
                "status_callback_method": "POST",
                "ended_reason": null,
                "url": "https://media.twilio.com/v1/PlayerStreamers/VJcafebabecafebabecafebabecafebabe",
                "links": {
                    "timed_metadata": "https://media.twilio.com/v1/PlayerStreamers/VJcafebabecafebabecafebabecafebabe/TimedMetadata",
                    "playback_grant": "https://media.twilio.com/v1/PlayerStreamers/VJcafebabecafebabecafebabecafebabe/PlaybackGrant"
                }
            }
            '
        ));

        $actual = $this->twilio->media->v1->playerStreamer("VJXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->fetch();

        $this->assertNotNull($actual);
    }

    public function testCreateRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->media->v1->playerStreamer->create();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'post',
            'https://media.twilio.com/v1/PlayerStreamers'
        ));
    }

    public function testCreateResponse(): void {
        $this->holodeck->mock(new Response(
            201,
            '
            {
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "date_created": "2015-07-30T20:00:00Z",
                "date_updated": "2015-07-30T20:00:00Z",
                "status": "created",
                "video": true,
                "sid": "VJcafebabecafebabecafebabecafebabe",
                "status_callback": "http://www.example.com",
                "status_callback_method": "POST",
                "ended_reason": null,
                "url": "https://media.twilio.com/v1/PlayerStreamers/VJcafebabecafebabecafebabecafebabe",
                "links": {
                    "timed_metadata": "https://media.twilio.com/v1/PlayerStreamers/VJcafebabecafebabecafebabecafebabe/TimedMetadata",
                    "playback_grant": "https://media.twilio.com/v1/PlayerStreamers/VJcafebabecafebabecafebabecafebabe/PlaybackGrant"
                }
            }
            '
        ));

        $actual = $this->twilio->media->v1->playerStreamer->create();

        $this->assertNotNull($actual);
    }

    public function testUpdateRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->media->v1->playerStreamer("VJXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->update("ended");
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $values = ['Status' => "ended", ];

        $this->assertRequest(new Request(
            'post',
            'https://media.twilio.com/v1/PlayerStreamers/VJXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
            null,
            $values
        ));
    }

    public function testUpdateResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "date_created": "2015-07-30T20:00:00Z",
                "date_updated": "2015-07-30T20:01:00Z",
                "status": "ended",
                "video": true,
                "sid": "VJcafebabecafebabecafebabecafebabe",
                "status_callback": "http://www.example.com",
                "status_callback_method": "POST",
                "ended_reason": "ended-via-api",
                "url": "https://media.twilio.com/v1/PlayerStreamers/VJcafebabecafebabecafebabecafebabe",
                "links": {
                    "timed_metadata": "https://media.twilio.com/v1/PlayerStreamers/VJcafebabecafebabecafebabecafebabe/TimedMetadata",
                    "playback_grant": "https://media.twilio.com/v1/PlayerStreamers/VJcafebabecafebabecafebabecafebabe/PlaybackGrant"
                }
            }
            '
        ));

        $actual = $this->twilio->media->v1->playerStreamer("VJXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->update("ended");

        $this->assertNotNull($actual);
    }

    public function testReadRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->media->v1->playerStreamer->read();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://media.twilio.com/v1/PlayerStreamers'
        ));
    }

    public function testReadEmptyResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "meta": {
                    "page": 0,
                    "page_size": 10,
                    "first_page_url": "https://media.twilio.com/v1/PlayerStreamers?Status=started&Order=asc&PageSize=10&Page=0",
                    "previous_page_url": null,
                    "url": "https://media.twilio.com/v1/PlayerStreamers?Status=started&Order=asc&PageSize=10&Page=0",
                    "next_page_url": null,
                    "key": "player_streamers"
                },
                "player_streamers": []
            }
            '
        ));

        $actual = $this->twilio->media->v1->playerStreamer->read();

        $this->assertNotNull($actual);
    }

    public function testReadItemsResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "meta": {
                    "page": 0,
                    "page_size": 10,
                    "first_page_url": "https://media.twilio.com/v1/PlayerStreamers?Status=ended&Order=desc&PageSize=10&Page=0",
                    "previous_page_url": null,
                    "url": "https://media.twilio.com/v1/PlayerStreamers?Status=ended&Order=desc&PageSize=10&Page=0",
                    "next_page_url": null,
                    "key": "player_streamers"
                },
                "player_streamers": [
                    {
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "date_created": "2015-07-30T20:00:00Z",
                        "date_updated": "2015-07-30T20:01:00Z",
                        "status": "ended",
                        "video": true,
                        "sid": "VJcafebabecafebabecafebabecafebabe",
                        "status_callback": "http://www.example.com",
                        "status_callback_method": "POST",
                        "ended_reason": "ended-via-api",
                        "url": "https://media.twilio.com/v1/PlayerStreamers/VJcafebabecafebabecafebabecafebabe",
                        "links": {
                            "timed_metadata": "https://media.twilio.com/v1/PlayerStreamers/VJcafebabecafebabecafebabecafebabe/TimedMetadata",
                            "playback_grant": "https://media.twilio.com/v1/PlayerStreamers/VJcafebabecafebabecafebabecafebabe/PlaybackGrant"
                        }
                    }
                ]
            }
            '
        ));

        $actual = $this->twilio->media->v1->playerStreamer->read();

        $this->assertNotNull($actual);
    }

    public function testReadItemsPageLargerThanMaxResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "meta": {
                    "page": 0,
                    "page_size": 100,
                    "first_page_url": "https://media.twilio.com/v1/PlayerStreamers?Status=ended&Order=desc&PageSize=100&Page=0",
                    "previous_page_url": null,
                    "url": "https://media.twilio.com/v1/PlayerStreamers?Status=ended&Order=desc&PageSize=100&Page=0",
                    "next_page_url": null,
                    "key": "player_streamers"
                },
                "player_streamers": [
                    {
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "date_created": "2015-07-30T20:00:00Z",
                        "date_updated": "2015-07-30T20:01:00Z",
                        "status": "ended",
                        "video": true,
                        "sid": "VJcafebabecafebabecafebabecafebabe",
                        "status_callback": "http://www.example.com",
                        "status_callback_method": "POST",
                        "ended_reason": "ended-via-api",
                        "url": "https://media.twilio.com/v1/PlayerStreamers/VJcafebabecafebabecafebabecafebabe",
                        "links": {
                            "timed_metadata": "https://media.twilio.com/v1/PlayerStreamers/VJcafebabecafebabecafebabecafebabe/TimedMetadata",
                            "playback_grant": "https://media.twilio.com/v1/PlayerStreamers/VJcafebabecafebabecafebabecafebabe/PlaybackGrant"
                        }
                    }
                ]
            }
            '
        ));

        $actual = $this->twilio->media->v1->playerStreamer->read();

        $this->assertNotNull($actual);
    }
}