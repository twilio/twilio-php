<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Tests\Integration\Verify\V2;

use Twilio\Exceptions\DeserializeException;
use Twilio\Exceptions\TwilioException;
use Twilio\Http\Response;
use Twilio\Tests\HolodeckTestCase;
use Twilio\Tests\Request;

class VerificationAttemptTest extends HolodeckTestCase {
    public function testReadRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->verify->v2->verificationAttempts->read();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://verify.twilio.com/v2/Attempts'
        ));
    }

    public function testListVerificationAttemptsEmptyResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "attempts": [],
                "meta": {
                    "key": "attempts",
                    "page": 0,
                    "page_size": 50,
                    "first_page_url": "https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0",
                    "previous_page_url": null,
                    "url": "https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0",
                    "next_page_url": null
                }
            }
            '
        ));

        $actual = $this->twilio->verify->v2->verificationAttempts->read();

        $this->assertNotNull($actual);
    }

    public function testListVerificationAttemptsResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "attempts": [
                    {
                        "sid": "VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "service_sid": "VAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "date_created": "2020-08-11T18:36:59Z",
                        "date_updated": "2020-08-11T18:37:00Z",
                        "conversion_status": "unconverted",
                        "channel": "sms",
                        "channel_data": {
                            "verification_sid": "VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                            "to": "+573003003030",
                            "status": "unconfirmed",
                            "message_status": "undelivered",
                            "error_code": "30008",
                            "country": "CO",
                            "code_length": 6,
                            "locale": "es",
                            "mcc": "732",
                            "mnc": "103",
                            "carrier": "Colombia Movil (Tigo)"
                        },
                        "url": "https://verify.twilio.com/v2/Attempts/VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                    }
                ],
                "meta": {
                    "key": "attempts",
                    "page": 0,
                    "page_size": 50,
                    "first_page_url": "https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0",
                    "previous_page_url": null,
                    "url": "https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0",
                    "next_page_url": null
                }
            }
            '
        ));

        $actual = $this->twilio->verify->v2->verificationAttempts->read();

        $this->assertNotNull($actual);
    }

    public function testFetchRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->verify->v2->verificationAttempts("VLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->fetch();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://verify.twilio.com/v2/Attempts/VLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
        ));
    }

    public function testFetchVerificationAttemptResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "sid": "VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "service_sid": "VAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "date_created": "2020-08-11T18:36:59Z",
                "date_updated": "2020-08-11T18:37:00Z",
                "conversion_status": "unconverted",
                "channel": "sms",
                "channel_data": {
                    "verification_sid": "VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                    "to": "+573003003030",
                    "status": "unconfirmed",
                    "message_status": "undelivered",
                    "error_code": "30008",
                    "country": "CO",
                    "code_length": 6,
                    "locale": "es",
                    "mcc": "732",
                    "mnc": "103",
                    "carrier": "Colombia Movil (Tigo)"
                },
                "url": "https://verify.twilio.com/v2/Attempts/VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
            }
            '
        ));

        $actual = $this->twilio->verify->v2->verificationAttempts("VLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->fetch();

        $this->assertNotNull($actual);
    }
}