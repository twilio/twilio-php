<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Tests\Integration\Messaging\V1;

use Twilio\Exceptions\DeserializeException;
use Twilio\Exceptions\TwilioException;
use Twilio\Http\Response;
use Twilio\Tests\HolodeckTestCase;
use Twilio\Tests\Request;

class UsecaseTest extends HolodeckTestCase {
    public function testFetchRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->messaging->v1->usecases->fetch();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://messaging.twilio.com/v1/Services/Usecases'
        ));
    }

    public function testFetchResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "usecases": [
                    {
                        "usecase": "notifications",
                        "description": "Transactional notifications and Alerts for any Delivery, Account, Reminder, Order, Fraud, Security, Public Service, or Emergency announcements.",
                        "purpose": "Notify my users."
                    },
                    {
                        "usecase": "marketing",
                        "description": "Marketing messages may contain product information, offers, and calls to action to engage with your organization.",
                        "purpose": "Market my services."
                    }
                ]
            }
            '
        ));

        $actual = $this->twilio->messaging->v1->usecases->fetch();

        $this->assertNotNull($actual);
    }
}