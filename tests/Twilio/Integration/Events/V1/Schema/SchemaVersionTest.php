<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Tests\Integration\Events\V1\Schema;

use Twilio\Exceptions\DeserializeException;
use Twilio\Exceptions\TwilioException;
use Twilio\Http\Response;
use Twilio\Tests\HolodeckTestCase;
use Twilio\Tests\Request;

class SchemaVersionTest extends HolodeckTestCase {
    public function testReadRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->events->v1->schemas("id")
                                     ->versions->read();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://events.twilio.com/v1/Schemas/id/Versions'
        ));
    }

    public function testReadEmptyResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "schema_versions": [],
                "meta": {
                    "page": 0,
                    "page_size": 10,
                    "first_page_url": "https://events.twilio.com/v1/Schemas/Messaging.MessageStatus/Versions?PageSize=10&Page=0",
                    "previous_page_url": null,
                    "url": "https://events.twilio.com/v1/Schemas/Messaging.MessageStatus/Versions?PageSize=10&Page=0",
                    "next_page_url": null,
                    "key": "schema_versions"
                }
            }
            '
        ));

        $actual = $this->twilio->events->v1->schemas("id")
                                           ->versions->read();

        $this->assertNotNull($actual);
    }

    public function testReadResultsResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "schema_versions": [
                    {
                        "id": "Messaging.MessageStatus",
                        "schema_version": 1,
                        "public": true,
                        "date_created": "2015-07-30T20:00:00Z",
                        "url": "https://events.twilio.com/v1/Schemas/Messaging.MessageStatus/Versions/1",
                        "raw": "https://events-schemas.twilio.com/Messaging.MessageStatus/1"
                    },
                    {
                        "id": "Messaging.MessageStatus",
                        "schema_version": 2,
                        "public": true,
                        "date_created": "2015-07-30T20:00:00Z",
                        "url": "https://events.twilio.com/v1/Schemas/Messaging.MessageStatus/Versions/2",
                        "raw": "https://events-schemas.twilio.com/Messaging.MessageStatus/2"
                    }
                ],
                "meta": {
                    "page": 0,
                    "page_size": 50,
                    "first_page_url": "https://events.twilio.com/v1/Schemas/Messaging.MessageStatus/Versions?PageSize=50&Page=0",
                    "previous_page_url": null,
                    "url": "https://events.twilio.com/v1/Schemas/Messaging.MessageStatus/Versions?PageSize=50&Page=0",
                    "next_page_url": null,
                    "key": "schema_versions"
                }
            }
            '
        ));

        $actual = $this->twilio->events->v1->schemas("id")
                                           ->versions->read();

        $this->assertNotNull($actual);
    }

    public function testFetchRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->events->v1->schemas("id")
                                     ->versions(1)->fetch();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://events.twilio.com/v1/Schemas/id/Versions/1'
        ));
    }

    public function testFetchResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "id": "Messaging.MessageStatus",
                "schema_version": 1,
                "public": true,
                "date_created": "2015-07-30T20:00:00Z",
                "url": "https://events.twilio.com/v1/Schemas/Messaging.MessageStatus/Versions/1",
                "raw": "https://events-schemas.twilio.com/Messaging.MessageStatus/1"
            }
            '
        ));

        $actual = $this->twilio->events->v1->schemas("id")
                                           ->versions(1)->fetch();

        $this->assertNotNull($actual);
    }
}