<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Tests\Integration\Trusthub\V1;

use Twilio\Exceptions\DeserializeException;
use Twilio\Exceptions\TwilioException;
use Twilio\Http\Response;
use Twilio\Tests\HolodeckTestCase;
use Twilio\Tests\Request;

class EndUserTest extends HolodeckTestCase {
    public function testCreateRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->trusthub->v1->endUsers->create("friendly_name", "type");
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $values = ['FriendlyName' => "friendly_name", 'Type' => "type", ];

        $this->assertRequest(new Request(
            'post',
            'https://trusthub.twilio.com/v1/EndUsers',
            null,
            $values
        ));
    }

    public function testCreateResponse(): void {
        $this->holodeck->mock(new Response(
            201,
            '
            {
                "date_updated": "2021-02-16T20:40:57Z",
                "sid": "ITaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "friendly_name": "auth_rep_1",
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "url": "https://trusthub.twilio.com/v1/EndUsers/ITaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "date_created": "2021-02-16T20:40:57Z",
                "attributes": {
                    "phone_number": "+11234567890",
                    "job_position": "CEO",
                    "first_name": "rep1",
                    "last_name": "test",
                    "business_title": "ceo",
                    "email": "foobar@test.com"
                },
                "type": "authorized_representative_1"
            }
            '
        ));

        $actual = $this->twilio->trusthub->v1->endUsers->create("friendly_name", "type");

        $this->assertNotNull($actual);
    }

    public function testReadRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->trusthub->v1->endUsers->read();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://trusthub.twilio.com/v1/EndUsers'
        ));
    }

    public function testReadEmptyResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "results": [],
                "meta": {
                    "page": 0,
                    "page_size": 50,
                    "first_page_url": "https://trusthub.twilio.com/v1/EndUsers?PageSize=50&Page=0",
                    "previous_page_url": null,
                    "url": "https://trusthub.twilio.com/v1/EndUsers?PageSize=50&Page=0",
                    "next_page_url": null,
                    "key": "results"
                }
            }
            '
        ));

        $actual = $this->twilio->trusthub->v1->endUsers->read();

        $this->assertNotNull($actual);
    }

    public function testReadFullResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "results": [
                    {
                        "date_updated": "2021-02-16T20:40:57Z",
                        "sid": "ITaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "friendly_name": "auth_rep_1",
                        "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "url": "https://trusthub.twilio.com/v1/EndUsers/ITaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                        "date_created": "2021-02-16T20:40:57Z",
                        "attributes": {
                            "phone_number": "+11234567890",
                            "job_position": "CEO",
                            "first_name": "rep1",
                            "last_name": "test",
                            "business_title": "ceo",
                            "email": "foobar@test.com"
                        },
                        "type": "authorized_representative_1"
                    }
                ],
                "meta": {
                    "page": 0,
                    "page_size": 50,
                    "first_page_url": "https://trusthub.twilio.com/v1/EndUsers?PageSize=50&Page=0",
                    "previous_page_url": null,
                    "url": "https://trusthub.twilio.com/v1/EndUsers?PageSize=50&Page=0",
                    "next_page_url": null,
                    "key": "results"
                }
            }
            '
        ));

        $actual = $this->twilio->trusthub->v1->endUsers->read();

        $this->assertGreaterThan(0, \count($actual));
    }

    public function testFetchRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->trusthub->v1->endUsers("ITXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->fetch();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'get',
            'https://trusthub.twilio.com/v1/EndUsers/ITXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
        ));
    }

    public function testFetchResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "date_updated": "2021-02-16T20:40:57Z",
                "sid": "ITaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "friendly_name": "auth_rep_1",
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "url": "https://trusthub.twilio.com/v1/EndUsers/ITaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "date_created": "2021-02-16T20:40:57Z",
                "attributes": {
                    "phone_number": "+11234567890",
                    "job_position": "CEO",
                    "first_name": "rep1",
                    "last_name": "test",
                    "business_title": "ceo",
                    "email": "foobar@test.com"
                },
                "type": "authorized_representative_1"
            }
            '
        ));

        $actual = $this->twilio->trusthub->v1->endUsers("ITXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->fetch();

        $this->assertNotNull($actual);
    }

    public function testUpdateRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->trusthub->v1->endUsers("ITXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->update();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'post',
            'https://trusthub.twilio.com/v1/EndUsers/ITXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
        ));
    }

    public function testUpdateResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "date_updated": "2021-02-16T20:40:57Z",
                "sid": "ITaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "friendly_name": "friendly_name",
                "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "url": "https://trusthub.twilio.com/v1/EndUsers/ITaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "date_created": "2021-02-16T20:40:57Z",
                "attributes": {
                    "phone_number": "+11234567890",
                    "job_position": "CEO",
                    "first_name": "rep1",
                    "last_name": "test",
                    "business_title": "ceo",
                    "email": "foobar@test.com"
                },
                "type": "authorized_representative_1"
            }
            '
        ));

        $actual = $this->twilio->trusthub->v1->endUsers("ITXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->update();

        $this->assertNotNull($actual);
    }

    public function testDeleteRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        try {
            $this->twilio->trusthub->v1->endUsers("ITXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->delete();
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $this->assertRequest(new Request(
            'delete',
            'https://trusthub.twilio.com/v1/EndUsers/ITXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
        ));
    }

    public function testDeleteResponse(): void {
        $this->holodeck->mock(new Response(
            204,
            null
        ));

        $actual = $this->twilio->trusthub->v1->endUsers("ITXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")->delete();

        $this->assertTrue($actual);
    }
}